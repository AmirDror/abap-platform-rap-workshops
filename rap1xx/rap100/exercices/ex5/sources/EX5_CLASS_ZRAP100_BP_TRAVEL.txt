CLASS LCL_HANDLER DEFINITION INHERITING FROM CL_ABAP_BEHAVIOR_HANDLER.
  PRIVATE SECTION.
  CONSTANTS:
      BEGIN OF travel_status,
        open     TYPE c LENGTH 1 VALUE 'O', "Open
        accepted TYPE c LENGTH 1 VALUE 'A', "Accepted
        rejected TYPE c LENGTH 1 VALUE 'X', "Rejected
      END OF travel_status.

    METHODS:
        GET_GLOBAL_AUTHORIZATIONS FOR GLOBAL AUTHORIZATION
        IMPORTING
           REQUEST requested_authorizations FOR Travel
        RESULT result,

          METHODS earlynumbering_create FOR NUMBERING
            IMPORTING entities FOR CREATE Travel.

          METHODS setStatusToOpen FOR DETERMINE ON MODIFY
            IMPORTING keys FOR Travel~setStatusToOpen.

          METHODS validateCustomer FOR VALIDATE ON SAVE
            IMPORTING keys FOR Travel~validateCustomer.

          METHODS validateDates FOR VALIDATE ON SAVE
            IMPORTING keys FOR Travel~validateDates.
          
ENDCLASS.

CLASS LCL_HANDLER IMPLEMENTATION.
  METHOD GET_GLOBAL_AUTHORIZATIONS.
  ENDMETHOD.
  METHOD earlynumbering_create.
    "---------------------------------------------------------------------------------------
    "For simplification reason, the proper error handling when using  number ranges is not
    "part of this implementation example.
    "You can find a more comprehensive implementation example of a managed BO
    "with a number range object in package /DMO/FLIGHT_MANAGED (class /DMO/BP_TRAVEL_M)
    "described in the RAP Development Guide "Developing Managed Transactional Apps"
    "---------------------------------------------------------------------------------------

    DATA:
      entity        TYPE STRUCTURE FOR CREATE ZRAP100_i_Travel_###,
      travel_id_max TYPE /dmo/travel_id.

    "Ensure Travel ID is not set yet (idempotent)- must be checked when BO is draft-enabled
    LOOP AT entities INTO entity WHERE TravelID IS NOT INITIAL.
      APPEND CORRESPONDING #( entity ) TO mapped-travel.
    ENDLOOP.

    DATA(entities_wo_travelid) = entities.
    DELETE entities_wo_travelid WHERE TravelID IS NOT INITIAL.

    "Get Numbers
    TRY.
        cl_numberrange_runtime=>number_get(
          EXPORTING
            nr_range_nr       = '01'
            object            = '/DMO/TRV_M'
            quantity          = CONV #( lines( entities_wo_travelid ) )
          IMPORTING
            number            = DATA(number_range_key)
            returncode        = DATA(number_range_return_code)
            returned_quantity = DATA(number_range_returned_quantity)
        ).
      CATCH cx_number_ranges INTO DATA(lx_number_ranges).
        LOOP AT entities_wo_travelid INTO entity.
          APPEND VALUE #(  %cid      = entity-%cid
                           %key      = entity-%key
                           %is_draft = entity-%is_draft
                           %msg      = lx_number_ranges
                        ) TO reported-travel.
          APPEND VALUE #(  %cid      = entity-%cid
                           %key      = entity-%key
                           %is_draft = entity-%is_draft
                        ) TO failed-travel.
        ENDLOOP.
        EXIT.
    ENDTRY.

    "determine the first free travel ID from the number range
    travel_id_max = number_range_key - number_range_returned_quantity.

    "set travel ID for new instances w/o ID
    LOOP AT entities_wo_travelid INTO entity.
      travel_id_max += 1.
      entity-TravelID = travel_id_max .

      APPEND VALUE #( %cid      = entity-%cid
                      %key      = entity-%key
                      %is_draft = entity-%is_draft
                    ) TO mapped-travel.
    ENDLOOP.

  ENDMETHOD.

  METHOD setStatusToOpen.
   " read travel instance(s) of the transferred keys
    READ ENTITIES OF ZRAP100_i_Travel_### IN LOCAL MODE
     ENTITY Travel
       FIELDS ( OverallStatus )
       WITH CORRESPONDING #( keys )
     RESULT DATA(travels)
     FAILED DATA(read_failed).

    " if travel status is already set, do nothing
    DELETE travels WHERE OverallStatus IS NOT INITIAL.
    CHECK travels IS NOT INITIAL.
    " else set travel status to open ('O')
    MODIFY ENTITIES OF ZRAP100_i_Travel_### IN LOCAL MODE
      ENTITY Travel
        UPDATE SET FIELDS
        WITH VALUE #( FOR travel IN travels ( %tky    = travel-%tky
                                              OverallStatus = travel_status-open ) )
    REPORTED DATA(update_reported).

    reported = CORRESPONDING #( DEEP update_reported ).
  ENDMETHOD.

**********************************************************************
* Validation: Check the validity of the entered customer data
**********************************************************************
  METHOD validateCustomer.
    " Read relevant travel instance data
    READ ENTITIES OF ZRAP100_i_Travel_### IN LOCAL MODE
    ENTITY Travel
     FIELDS ( CustomerID )
     WITH CORRESPONDING #( keys )
    RESULT DATA(lt_travel).

    DATA lt_customer TYPE SORTED TABLE OF /dmo/customer WITH UNIQUE KEY customer_id.

    " Optimization of DB select: extract distinct non-initial customer IDs
    lt_customer = CORRESPONDING #( lt_travel DISCARDING DUPLICATES MAPPING customer_id = customerID EXCEPT * ).
    DELETE lt_customer WHERE customer_id IS INITIAL.
    IF lt_customer IS NOT INITIAL.

      " Check if customer ID exists
      SELECT FROM /dmo/customer FIELDS customer_id
        FOR ALL ENTRIES IN @lt_customer
        WHERE customer_id = @lt_customer-customer_id
        INTO TABLE @DATA(lt_customer_db).
    ENDIF.
    " Raise msg for non existing and initial customer id
    LOOP AT lt_travel INTO DATA(ls_travel).
      IF ls_travel-CustomerID IS INITIAL
         OR NOT line_exists( lt_customer_db[ customer_id = ls_travel-CustomerID ] ).

        APPEND VALUE #(  TravelID = ls_travel-TravelID ) TO failed-travel.
        APPEND VALUE #(  TravelID = ls_travel-TravelID
                         %msg = new_message( id        = '/DMO/CM_FLIGHT_LEGAC'
                                             number    = '002'
                                             v1        = ls_travel-CustomerID
                                             severity  = if_abap_behv_message=>severity-error )
                         %element-CustomerID = if_abap_behv=>mk-on )
          TO reported-travel.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

**********************************************************************
* Validation: Check the validity of begin and end dates
**********************************************************************
  METHOD validateDates.
    READ ENTITIES OF ZRAP100_i_Travel_### IN LOCAL MODE
      ENTITY travel
        FIELDS ( BeginDate EndDate )
        WITH CORRESPONDING #( keys )
      RESULT DATA(lt_travel_result).

    LOOP AT lt_travel_result INTO DATA(ls_travel_result).

      IF ls_travel_result-EndDate < ls_travel_result-BeginDate.  "if end_date is before begin_date

        APPEND VALUE #( %key        = ls_travel_result-%key
                        travelID    = ls_travel_result-TravelID ) TO failed-travel.

        APPEND VALUE #( %key = ls_travel_result-%key
                        %msg     = new_message( id       = /dmo/cx_flight_legacy=>end_date_before_begin_date-msgid
                                                number   = /dmo/cx_flight_legacy=>end_date_before_begin_date-msgno
                                                v1       = ls_travel_result-BeginDate
                                                v2       = ls_travel_result-EndDate
                                                v3       = ls_travel_result-TravelID
                                                severity = if_abap_behv_message=>severity-error )
                        %element-BeginDate = if_abap_behv=>mk-on
                        %element-EndDate   = if_abap_behv=>mk-on ) TO reported-travel.

      ELSEIF ls_travel_result-BeginDate < cl_abap_context_info=>get_system_date( ).  "begin_date must be in the future

        APPEND VALUE #( %key       = ls_travel_result-%key
                        travelID   = ls_travel_result-TravelID ) TO failed-travel.

        APPEND VALUE #( %key = ls_travel_result-%key
                        %msg = new_message( id       = /dmo/cx_flight_legacy=>begin_date_before_system_date-msgid
                                            number   = /dmo/cx_flight_legacy=>begin_date_before_system_date-msgno
                                            severity = if_abap_behv_message=>severity-error )
                        %element-BeginDate = if_abap_behv=>mk-on
                        %element-EndDate   = if_abap_behv=>mk-on ) TO reported-travel.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.
